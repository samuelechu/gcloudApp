package transferMail

import (
    "log"
	"net/http"
	"io"
    "bytes"
    "github.com/samuelechu/cloudSQL"
    "github.com/buger/jsonparser"
    "golang.org/x/net/context"
    "google.golang.org/appengine/urlfetch"
    "github.com/samuelechu/jsonHelper"
)

type nopCloser struct { 
    io.Reader 
} 

func (nopCloser) Close() error { return nil } 

func startTransfer(ctx context.Context, curUserID, sourceToken, sourceID, destToken, destID string) {
    client := urlfetch.Client(ctx)

    labelMap := getLabelMap(client,sourceToken,destToken)
    log.Print("\n\n\nPrinting labelIdMap")
        for key, value := range labelMap {
        log.Print("Key:", key, " Value:", value)
    }
//get threads
	threads := cloudSQL.GetThreadsForUser(curUserID)
	log.Printf("GetThreads returned %v", threads)
	log.Printf("curUserID : %v, sourceToken : %v, sourceID : %v, destToken : %v, destID : %v", curUserID, sourceToken, sourceID, destToken, destID)
	
	urlStr := "https://www.googleapis.com/gmail/v1/users/me/messages/15d3d8e8de90ebcc?format=raw" 
    req, _ := http.NewRequest("GET", urlStr, nil)
    req.Header.Set("Authorization", "Bearer " + sourceToken)

    respBody := jsonHelper.GetRespBody(req, client)
    if len(respBody) == 0 {
         log.Print("Error: empty respBody")
         return
    }
    //log.Printf("HTTP PostForm/GET returned %v", string(respBody))

    raw, _, _, _ := jsonparser.Get(respBody, "raw")
    rawReal := string(raw)


    rawReal = ""

//post message
    urlStr = "https://www.googleapis.com/upload/gmail/v1/users/me/messages?uploadType=multipart"
    body := nopCloser{bytes.NewBufferString("--foo_bar\nContent-Type: application/json; charset=UTF-8\n\n{" +
"\n\"raw\":\"" + rawReal + "\",\n\"labelIds\": [\"INBOX\", \"UNREAD\"]\n}" +
"\n--foo_bar\nContent-Type: message/rfc822\n\nstringd\n--foo_bar--")} 

    insertReq, _ := http.NewRequest("POST", urlStr, body)
    insertReq.Header.Set("Authorization", "Bearer " + destToken)
    insertReq.Header.Set("Content-Type", "multipart/related; boundary=\"foo_bar\"")

    respBody = jsonHelper.GetRespBody(insertReq, client)
    if len(respBody) == 0 {
         log.Print("Error: empty respBody")
         return
    }
    log.Printf("HTTP PostForm/GET returned %v", string(respBody))

}